--- linux-2.6.12-rc2-orig/arch/i386/kernel/entry.S	2005-04-04 18:38:05.000000000 +0200
+++ linux-2.6.12-rc2-fkt/arch/i386/kernel/entry.S	2005-05-21 01:11:09.754118125 +0200
@@ -4,6 +4,9 @@
  *  Copyright (C) 1991, 1992  Linus Torvalds
  */
 
+/*****  25-Jun-03	st		added lcall7/27 probe *****/
+/*****	11-Oct-00	rdr		added fkt features *****/
+
 /*
  * entry.S contains the system-call and fault low-level handling routines.
  * This also contains the timer-interrupt handler, as well as all interrupts
@@ -52,6 +55,10 @@
 
 #define nr_syscalls ((syscall_table_size)/4)
 
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+#include <linux/fkt.h>
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 EBX		= 0x00
 ECX		= 0x04
 EDX		= 0x08
@@ -226,6 +233,16 @@ ENTRY(system_call)
 	pushl %eax			# save orig_eax
 	SAVE_ALL
 	GET_THREAD_INFO(%ebp)
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	   /* rdr */
+	jz 7f				# jump if 0 (not probing)					   /* rdr */
+	andl $(FKT_SYS_CALL_MASK),%eax		# ensure 0 <= %eax <= FKT_SYS_CALL_MASK					   /* st */
+	call fkt_eax_ebx0# sys call number in %eax			   /* rdr */
+	movl ORIG_EAX(%esp),%eax# restore orig_eax						   /* rdr */
+7:						#											   /* rdr */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 					# system call tracing in operation
 	/* Note, _TIF_SECCOMP is bit number 8, and so it needs testw and not testb */
 	testw $(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SECCOMP),TI_flags(%ebp)
@@ -244,6 +261,15 @@ syscall_exit:
 	jne syscall_exit_work
 
 restore_all:
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	   /* rdr */
+	jz 7f				# jump if 0 (not probing)					   /* rdr */
+	movl $(((FKT_RET_FROM_SYS_CALL_CODE)<<8)|12),%eax						   /* rdr */
+	call fkt_eax_ebx0# code in %eax, no parameters		   /* rdr */
+7:						#											   /* rdr */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 	movl EFLAGS(%esp), %eax		# mix EFLAGS, SS and CS
 	movb OLDSS(%esp), %ah
 	movb CS(%esp), %al
@@ -411,14 +437,36 @@ vector=vector+1
 	ALIGN
 common_interrupt:
 	SAVE_ALL
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			/* st */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	/* st */
+	jz 7f				# jump if 0 (not probing)	/* st */
+	movl (ORIG_EAX)(%esp),%eax					/* st */
+	addl $(FKT_IRQ_TIMER+256),%eax
+	call fkt_eax_ebx0  # sys call number in %eax	/* st */
+7:					#				/* st */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */				/* st */
+
 	movl %esp,%eax
 	call do_IRQ
 	jmp ret_from_intr
 
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			/* st */
+#define FKT_BUILD_INTERRUPT(v)	\
+	testl $(FKT_KEYMASK0),fkt_active; /* probing active? */	\
+	jz 7f;				/* jump if 0 (not probing) */     	\
+	movl $(FKT_TRAP_BASE+v),%eax;					\
+	call fkt_eax_ebx0;  /* sys call number in %eax7 */    	\
+7:
+#else
+#define FKT_BUILD_INTERRUPT(v)
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */
+
 #define BUILD_INTERRUPT(name, nr)	\
 ENTRY(name)				\
 	pushl $nr-256;			\
 	SAVE_ALL			\
+	FKT_BUILD_INTERRUPT(nr)		\
 	movl %esp,%eax;			\
 	call smp_/**/name;		\
 	jmp ret_from_intr;
@@ -429,9 +477,10 @@ ENTRY(name)				\
 ENTRY(divide_error)
 	pushl $0			# no error code
 	pushl $do_divide_error
+	pushl $(FKT_TRAP_BASE)					       /* rdr */
 	ALIGN
 error_code:
-	pushl %ds
+#	pushl %ds			# replaced by trap number	/* st */
 	pushl %eax
 	xorl %eax, %eax
 	pushl %ebp
@@ -449,26 +498,50 @@ error_code:
 	movl ORIG_EAX(%esp), %edx	# get the error code
 	movl %eax, ORIG_EAX(%esp)
 	movl %ecx, ES(%esp)
+	movl %ds, %eax			# save ds
+	xchgl %eax, DS(%esp)		# save ds, get trap no
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	   /* rdr */
+	jz 7f				# jump if 0 (not probing)					   /* rdr */
+	pushl %edx			# save error code		/* st */
+	call fkt_eax_ebx0# call probe (trap no. in eax)	   /* rdr */
+	popl  %edx			# restore error code		/* st */
+7:						#											   /* rdr */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 	movl $(__USER_DS), %ecx
 	movl %ecx, %ds
 	movl %ecx, %es
 	movl %esp,%eax			# pt_regs pointer
+
 	call *%edi
 	jmp ret_from_exception
 
 ENTRY(coprocessor_error)
 	pushl $0
 	pushl $do_coprocessor_error
+	pushl $(FKT_TRAP_BASE+16)				       /* rdr */
 	jmp error_code
 
 ENTRY(simd_coprocessor_error)
 	pushl $0
 	pushl $do_simd_coprocessor_error
+	pushl $(FKT_TRAP_BASE+19)				       /* rdr */
 	jmp error_code
 
 ENTRY(device_not_available)
 	pushl $-1			# mark this as an int
 	SAVE_ALL
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	   /* rdr */
+	jz 7f				# jump if 0 (not probing)					   /* rdr */
+	movl $(FKT_TRAP_BASE+7),%eax					   /* rdr */
+	call fkt_eax_ebx0# call probe (trap no. in eax)	   /* rdr */
+7:					#											   /* rdr */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 	movl %cr0, %eax
 	testl $0x4, %eax		# EM (math emulation bit)
 	jne device_not_available_emulate
@@ -510,6 +583,13 @@ ENTRY(debug)
 debug_stack_correct:
 	pushl $-1			# mark this as an int
 	SAVE_ALL
+#if defined(CONFIG_FKT) || defined(CONFIG_FKT_MODULE)			/* st */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?		/* st */
+	jz 7f				# jump if 0 (not probing)	/* st */
+	movl $(FKT_TRAP_BASE+1), %eax	# set code			/* st */
+	call fkt_eax_ebx0		# code in %eax, no parameter	/* st */
+7:
+#endif /* CONFIG_FKT or CONFIG_FKT_MODULE */
 	xorl %edx,%edx			# error code 0
 	movl %esp,%eax			# pt_regs pointer
 	call do_debug
@@ -547,6 +627,15 @@ ENTRY(nmi)
 nmi_stack_correct:
 	pushl %eax
 	SAVE_ALL
+
+#if defined(CONFIG_FKT)  ||  defined(CONFIG_FKT_MODULE)			   /* rdr */
+	testl $(FKT_KEYMASK0),fkt_active # probing active?	   /* rdr */
+	jz 7f				# jump if 0 (not probing)					   /* rdr */
+	movl $(FKT_TRAP_BASE+2),%eax				   /* rdr */
+	call fkt_eax0# call probe (trap no. in eax)		   /* rdr */
+7:						#											   /* rdr */
+#endif	/* CONFIG_FKT or CONFIG_FKT_MODULE */					   /* rdr */
+
 	xorl %edx,%edx		# zero error code
 	movl %esp,%eax		# pt_regs pointer
 	call do_nmi
@@ -592,6 +681,13 @@ nmi_16bit_stack:
 ENTRY(int3)
 	pushl $-1			# mark this as an int
 	SAVE_ALL
+#if defined(CONFIG_FKT) || defined(CONFIG_FKT_MODULE)			/* st */
+	testl $(FKT_KEYMASK0),fkt_active # probing active ?		/* st */
+	jz 7f				# jump if 0 (not probing)	/* st */
+	movl $(FKT_TRAP_BASE+3), %eax	# code				/* st */
+	call fkt_eax_ebx0		# call probe (trap no in eax)	/* st */
+7:
+#endif /* CONFIG_FKT or CONFIG_FKT_MODULE */
 	xorl %edx,%edx		# zero error code
 	movl %esp,%eax		# pt_regs pointer
 	call do_int3
@@ -602,57 +698,69 @@ ENTRY(int3)
 ENTRY(overflow)
 	pushl $0
 	pushl $do_overflow
+	pushl $(FKT_TRAP_BASE+4)				       /* rdr */
 	jmp error_code
 
 ENTRY(bounds)
 	pushl $0
 	pushl $do_bounds
+	pushl $(FKT_TRAP_BASE+5)				       /* rdr */
 	jmp error_code
 
 ENTRY(invalid_op)
 	pushl $0
 	pushl $do_invalid_op
+	pushl $(FKT_TRAP_BASE+6)				       /* rdr */
 	jmp error_code
 
 ENTRY(coprocessor_segment_overrun)
 	pushl $0
 	pushl $do_coprocessor_segment_overrun
+	pushl $(FKT_TRAP_BASE+9)				       /* rdr */
 	jmp error_code
 
 ENTRY(invalid_TSS)
 	pushl $do_invalid_TSS
+	pushl $(FKT_TRAP_BASE+10)				       /* rdr */
 	jmp error_code
 
 ENTRY(segment_not_present)
 	pushl $do_segment_not_present
+	pushl $(FKT_TRAP_BASE+11)				       /* rdr */
 	jmp error_code
 
 ENTRY(stack_segment)
 	pushl $do_stack_segment
+	pushl $(FKT_TRAP_BASE+12)				       /* rdr */
 	jmp error_code
 
 ENTRY(general_protection)
 	pushl $do_general_protection
+	pushl $(FKT_TRAP_BASE+13)				       /* rdr */
 	jmp error_code
 
 ENTRY(alignment_check)
 	pushl $do_alignment_check
+	pushl $(FKT_TRAP_BASE+17)				       /* rdr */
 	jmp error_code
 
 ENTRY(page_fault)
 	pushl $do_page_fault
+	pushl $(FKT_TRAP_BASE+14)				       /* rdr */
 	jmp error_code
 
 #ifdef CONFIG_X86_MCE
 ENTRY(machine_check)
 	pushl $0
 	pushl machine_check_vector
+	pushl $(FKT_TRAP_BASE+18)				       /* rdr */
 	jmp error_code
 #endif
 
 ENTRY(spurious_interrupt_bug)
 	pushl $0
 	pushl $do_spurious_interrupt_bug
+	pushl $(FKT_TRAP_BASE+15)				       /* rdr */
 	jmp error_code
 
 .data
