#include <stdio.h>
#include <GTG.h>
#include "eztrace_convert.h"
#include "@HEADER_FILE@"

int eztrace_convert_@MODULE@_init();

int handle_@MODULE@_events(struct fxt_ev_64 *ev);

@CONVERT_FUNCTIONS_PROTOTYPES@



/* Constructor of the plugin.
 * This function registers the current module to eztrace_convert
 */
struct eztrace_convert_module @MODULE@_module;
void libinit(void) __attribute__ ((constructor));
void libinit(void)
{
  @MODULE@_module.api_version = EZTRACE_API_VERSION;

  /* Specify the initialization function.
   * This function will be called once all the plugins are loaded
   * and the trace is started.
   * This function usually declared StateTypes, LinkTypes, etc.
   */
  @MODULE@_module.init = eztrace_convert_@MODULE@_init;

  /* Specify the function to call for handling an event
   */
  @MODULE@_module.handle = handle_@MODULE@_events;

  /* Specify the module prefix */
  @MODULE@_module.module_prefix = @MODULE@_EVENTS_ID;

  asprintf(&@MODULE@_module.name, "@MODULE@");
  asprintf(&@MODULE@_module.description, @MODULE_DESC@);

  @MODULE@_module.token.data = &@MODULE@_module;

  /* Register the module to eztrace_convert */
  eztrace_convert_register_module(&@MODULE@_module);

  //printf("module @MODULE@ loaded\n");
}

void libfinalize(void) __attribute__ ((destructor));
void libfinalize(void)
{
  //printf("unloading module @MODULE@\n");
}



/*
 * This function will be called once all the plugins are loaded
 * and the trace is started.
 * This function usually declared StateTypes, LinkTypes, etc.
 */
int
eztrace_convert_@MODULE@_init()
{
@CONVERT_INIT@
}


/* This function is called by eztrace_convert for each event to
 * handle.
 * It shall return 1 if the event was handled successfully or
 * 0 otherwise.
 */
int
handle_@MODULE@_events(struct fxt_ev_64 *ev)
{
  switch(ev->code)
    {
@CONVERT_CASE@
    default:
      /* The event was not handled */
      return 0;
    }
  return 1;
}

@CONVERT_FUNCTIONS_BODY@
