# Copyright © CNRS, INRIA, Université Bordeaux 1
# See COPYING in top-level directory.
 
#! /bin/bash

debug=n
mpi=n
show_env=n
remove_new_file=no

usage()
{
cat << EOF
usage: $0 options

OPTIONS:
   -?                               Show this message
   -t "plugin1 plugin2 ... pluginN" Select a list of plugins
   -o <directory>	       	    Select the output directory
   -l <directory>	       	    Select a plugin directory
   -f 				    Enable EZTRACE_FLUSH
   -d                               Run EZtrace with gdb
   -e                               Show environment
   -p                               PadicoTM mode
   -m                               MPI mode
EOF
}

while getopts 't:o:l:fbdmep' OPTION; do
  case $OPTION in
  d)
	debug=y
       	;;
  e)
	show_env=y
	;;
  m)
	mpi=y
	;;
  p)
	padico=y
	;;
  t)
	modules=$OPTARG
	export EZTRACE_TRACE=$modules
	;;
  o)
	output_path=$OPTARG
	export EZTRACE_TRACE_DIR=$output_path
	;;
  l)
	eztrace_lib_path=$OPTARG
	export EZTRACE_LIBRARY_PATH=$eztrace_library_path
	;;
  f)
	export EZTRACE_FLUSH=1
	;;
  ?)	usage
	exit 2
	;;
  esac
done

# remove the options from the command line
shift $(($OPTIND - 1))

prefix=/usr/local
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
bindir=${exec_prefix}/bin

# make sure eztrace libs are available
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$libdir

prog_name=$1
shift
new_prog_name=$prog_name

# libeztrace should always be preloaded!
files=${libdir}/libeztrace-autostart.so

EZTRACE_LIBRARY_PATH=${EZTRACE_LIBRARY_PATH}:${libdir}/

if [ "x$EZTRACE_TRACE" != x ]; then

# only use the specified modules
  for module in $EZTRACE_TRACE
  do
    for dir in `echo $EZTRACE_LIBRARY_PATH |sed 's/:/ /g'`
    do
        if [ -f ${dir}/libeztrace-autostart-$module.so ]; then
  	   files="$files:${dir}/libeztrace-autostart-$module.so"
	fi
    done
  done
else

# use all the available modules
  for dir in `echo $EZTRACE_LIBRARY_PATH |sed 's/:/ /g'`
  do
    for module in `ls $dir/libeztrace-autostart-*.so 2>/dev/null`
    do
      files="$files:$module"
    done
  done
fi

if [ x$debug = xy ]; then

#  generate a gdbinit file that will preload all the modules

   gdbinit_file=`mktemp`
   echo "set env LD_PRELOAD $files" > $gdbinit_file
   echo "set env LD_LIBRARY_PATH $LD_LIBRARY_PATH" >> $gdbinit_file
   echo "echo \n" >> $gdbinit_file
   echo "echo EZTrace: hook loaded\n" >> $gdbinit_file

   gdb -x $gdbinit_file  --args $new_prog_name $*
   rm $gdbinit_file
elif [ x$show_env = xy ]; then
    remove_new_file=no
    echo env LD_PRELOAD=$files LD_LIBRARY_PATH=$LD_LIBRARY_PATH $new_prog_name $*
elif [ x$mpi = xy ]; then
    remove_new_file=no
    echo env LD_PRELOAD $files LD_LIBRARY_PATH $LD_LIBRARY_PATH $new_prog_name $*
elif [ x$padico = xy ]; then
    remove_new_file=no
    echo --padico-ld-preload=$files $new_prog_name $*
else
    LD_PRELOAD=$files $new_prog_name $*
fi

if [ "x$remove_new_file" = "xyes" ]; then
   echo "removing $new_prog_name"
   rm $new_prog_name
fi
