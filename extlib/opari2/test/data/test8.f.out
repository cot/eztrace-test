
#line 1 "test8.f"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Tests whether specific clauses are found and inserted into the CTC string.

      program test8
      include 'test8.f.opari.inc'
      integer i
      integer k
      
      integer, save :: j
#line 25 "test8.f"
!$omp threadprivate(j)

      pomp_num_threads = 4
      pomp_if = ( k.eq.0 )
      call POMP2_Parallel_fork(pomp2_region_1,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"98*regionType=parallel*sscl=test8.f:27:27*escl=test8.f:0:0*"//
     &"hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 27 "test8.f"
!$omp parallel                           reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_1)
#line 28 "test8.f"
      write(*,*) "parallel"
      
      call POMP2_Do_enter(pomp2_region_2,
     &"105*regionType=do*sscl=test8.f:30:30*escl=test8.f:0:0*hasRe"//
     &"duction=1*scheduleType=dynamic,5*hasCollapse=1**" )
#line 30 "test8.f"
!$omp do reduction(+:k) schedule(dynamic, 5) collapse(1)
      do i=1,4
         write(*,*) "do",i
         k = k + 1
      enddo
#line 35 "test8.f"
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_2, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_2, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_2)
#line 36 "test8.f"
      
      call POMP2_Sections_enter(pomp2_region_3,
     &"73*regionType=sections*sscl=test8.f:37:37*escl=test8.f:0:0*"//
     &"numSections=0**" )
#line 37 "test8.f"
!$omp sections reduction(+:k)
#line 38 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &"73*regionType=sections*sscl=test8.f:37:37*escl=test8.f:0:0*"//
     &"numSections=0**" )
#line 39 "test8.f"
      write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_3)
#line 40 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &"73*regionType=sections*sscl=test8.f:37:37*escl=test8.f:0:0*"//
     &"numSections=1**" )
#line 41 "test8.f"
      write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_3)
#line 42 "test8.f"
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_3, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_3, pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_3)
#line 43 "test8.f"
            
      call POMP2_Implicit_barrier_enter(pomp2_region_1, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 44 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1, pomp2_old_task)
#line 45 "test8.f"

      pomp_num_threads = pomp2_lib_get_max_threads()
      pomp_if = .true.
      call POMP2_Parallel_fork(pomp2_region_4,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"59*regionType=parallel*sscl=test8.f:46:46*escl=test8.f:0:0*"//
     &"*" )
#line 46 "test8.f"
!$omp parallel
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_4)
#line 47 "test8.f"
      pomp_if = .true.
      if (pomp_if) then
      call POMP2_Task_create_begin(pomp2_region_5, pomp2_new_task,
     &pomp2_old_task, 
     &pomp_if,
     &"67*regionType=task*sscl=test8.f:47:47*escl=test8.f:0:0*hasU"//
     &"ntied=1**" )
      end if
#line 47 "test8.f"
!$omp task       
!$omp& if(pomp_if) firstprivate(pomp2_new_task, pomp_if)
      if (pomp_if) then
      call POMP2_Task_begin(pomp2_region_5, pomp2_new_task)
      end if
#line 48 "test8.f"
      write(*,*) "task"
      if (pomp_if) then
      call POMP2_Task_end(pomp2_region_5)
      end if
#line 49 "test8.f"
!$omp end task
      if (pomp_if) then
      call POMP2_Task_create_end(pomp2_region_5, pomp2_old_task)
      end if
#line 50 "test8.f"
      call POMP2_Implicit_barrier_enter(pomp2_region_4, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_4, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_4)
#line 50 "test8.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_4, pomp2_old_task)
#line 51 "test8.f"

      pomp_num_threads = 4
      pomp_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_6,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"155*regionType=paralleldo*sscl=test8.f:52:53*escl=test8.f:0"//
     &":0*hasIf=1*hasNumThreads=1*hasReduction=1*scheduleType=stat"//
     &"ic,chunkif*hasCollapse=1*hasOrdered=1**" )
#line 52 "test8.f"
!$omp  parallel                   reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_6)
      call POMP2_Do_enter(pomp2_region_6,
     &"155*regionType=paralleldo*sscl=test8.f:52:53*escl=test8.f:0"//
     &":0*hasIf=1*hasNumThreads=1*hasReduction=1*scheduleType=stat"//
     &"ic,chunkif*hasCollapse=1*hasOrdered=1**" )
#line 52 "test8.f"
!$omp           do                              
!$omp+ schedule(static,chunkif) collapse(1) ordered           
      do i=1,4
      call POMP2_Ordered_enter(pomp2_region_7,
     &"58*regionType=ordered*sscl=test8.f:55:55*escl=test8.f:0:0**"//
     &"" )
#line 55 "test8.f"
!$omp ordered
      call POMP2_Ordered_begin(pomp2_region_7)
#line 56 "test8.f"
         write(*,*) "do",i
      call POMP2_Ordered_end(pomp2_region_7)
#line 57 "test8.f"
!$omp end ordered
      call POMP2_Ordered_exit(pomp2_region_7)
#line 58 "test8.f"
         k = k + 1
      enddo
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_6, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_6, pomp2_old_task)
      call POMP2_Do_exit(pomp2_region_6)
      call POMP2_Parallel_end(pomp2_region_6)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_6, pomp2_old_task)
#line 61 "test8.f"

      pomp_num_threads = 4
      pomp_if = ( (i+k)>5 )
      call POMP2_Parallel_fork(pomp2_region_8,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"106*regionType=parallelsections*sscl=test8.f:62:62*escl=tes"//
     &"t8.f:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 62 "test8.f"
!$omp parallel                                     reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_8)
      call POMP2_Sections_enter(pomp2_region_8)
#line 62 "test8.f"
!$omp          sections                                          
#line 63 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_8,
     &"106*regionType=parallelsections*sscl=test8.f:62:62*escl=tes"//
     &"t8.f:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 64 "test8.f"
      write(*,*) "section 1"
      call POMP2_Section_end(pomp2_region_8)
#line 65 "test8.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_8,
     &"106*regionType=parallelsections*sscl=test8.f:62:62*escl=tes"//
     &"t8.f:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 66 "test8.f"
      write(*,*) "section 2"
      call POMP2_Section_end(pomp2_region_8)
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_8, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_8, pomp2_old_task)
      call POMP2_Sections_exit(pomp2_region_8)
      call POMP2_Parallel_end(pomp2_region_8)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_8, pomp2_old_task)
#line 68 "test8.f"

      pomp_num_threads = 4
      pomp_if = ( .true. )
      call POMP2_Parallel_fork(pomp2_region_9,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"107*regionType=parallelworkshare*sscl=test8.f:69:69*escl=te"//
     &"st8.f:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 69 "test8.f"
!$omp parallel                                     reduction(+:k)
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_9)
      call POMP2_Workshare_enter(pomp2_region_9,
     &"107*regionType=parallelworkshare*sscl=test8.f:69:69*escl=te"//
     &"st8.f:0:0*hasIf=1*hasNumThreads=1*hasReduction=1**" )
#line 69 "test8.f"
!$omp          workshare                                         
      write(*,*) "workshare"
!$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(pomp2_region_9, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_9, pomp2_old_task)
      call POMP2_Workshare_exit(pomp2_region_9)
      call POMP2_Parallel_end(pomp2_region_9)
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_9, pomp2_old_task)
#line 72 "test8.f"
      end program test2
      

      subroutine POMP2_Init_regions_000()
         include 'test8.f.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, 
     &"100*regionType=parallel*sscl=test8.f:27:27*escl=test8.f:44:"//
     &"44*hasIf=1*hasNumThreads=1*hasReduction=1**" )
         call POMP2_Assign_handle( pomp2_region_2, 
     &"107*regionType=do*sscl=test8.f:30:30*escl=test8.f:35:35*has"//
     &"Reduction=1*scheduleType=dynamic,5*hasCollapse=1**" )
         call POMP2_Assign_handle( pomp2_region_3, 
     &"75*regionType=sections*sscl=test8.f:37:37*escl=test8.f:42:4"//
     &"2*numSections=2**" )
         call POMP2_Assign_handle( pomp2_region_4, 
     &"61*regionType=parallel*sscl=test8.f:46:46*escl=test8.f:50:5"//
     &"0**" )
         call POMP2_Assign_handle( pomp2_region_5, 
     &"69*regionType=task*sscl=test8.f:47:47*escl=test8.f:49:49*ha"//
     &"sUntied=1**" )
         call POMP2_Assign_handle( pomp2_region_6, 
     &"157*regionType=paralleldo*sscl=test8.f:52:53*escl=test8.f:6"//
     &"0:60*hasIf=1*hasNumThreads=1*hasReduction=1*scheduleType=st"//
     &"atic,chunkif*hasCollapse=1*hasOrdered=1**" )
         call POMP2_Assign_handle( pomp2_region_7, 
     &"60*regionType=ordered*sscl=test8.f:55:55*escl=test8.f:57:57"//
     &"**" )
         call POMP2_Assign_handle( pomp2_region_8, 
     &"108*regionType=parallelsections*sscl=test8.f:62:62*escl=tes"//
     &"t8.f:67:67*hasIf=1*hasNumThreads=1*hasReduction=1**" )
         call POMP2_Assign_handle( pomp2_region_9, 
     &"109*regionType=parallelworkshare*sscl=test8.f:69:69*escl=te"//
     &"st8.f:71:71*hasIf=1*hasNumThreads=1*hasReduction=1**" )
      end
