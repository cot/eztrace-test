
#line 1 "test4.f"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Test the nowait and untied clauses.

      program test4
      include 'test4.f.opari.inc'
      integer i

      real a(5,5), b(5,5), c(5,5)

      pomp_num_threads = pomp2_lib_get_max_threads()
      pomp_if = .true.
      call POMP2_Parallel_fork(pomp2_region_1,
     &pomp_if, pomp_num_threads, pomp2_old_task,
     &"59*regionType=parallel*sscl=test4.f:25:25*escl=test4.f:0:0*"//
     &"*" )
#line 25 "test4.f"
!$omp parallel
!$omp& firstprivate(pomp2_old_task) private(pomp2_new_task)
!$omp& if(pomp_if) num_threads(pomp_num_threads) 
      call POMP2_Parallel_begin(pomp2_region_1)
#line 26 "test4.f"
      write(*,*) "parallel"
      call POMP2_Do_enter(pomp2_region_2,
     &"53*regionType=do*sscl=test4.f:27:27*escl=test4.f:0:0**" )
#line 27 "test4.f"
!$omp do
      do i=1,4
         write(*,*) "do nowait",i
      enddo
#line 31 "test4.f"
!$omp enddo nowait
      call POMP2_Do_exit(pomp2_region_2)
#line 32 "test4.f"
      
      call POMP2_Sections_enter(pomp2_region_3,
     &"73*regionType=sections*sscl=test4.f:33:33*escl=test4.f:0:0*"//
     &"numSections=0**" )
#line 33 "test4.f"
!$omp sections
#line 34 "test4.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &"73*regionType=sections*sscl=test4.f:33:33*escl=test4.f:0:0*"//
     &"numSections=0**" )
#line 35 "test4.f"
      write(*,*) "section nowait 1"
      call POMP2_Section_end(pomp2_region_3)
#line 36 "test4.f"
!$omp section
      call POMP2_Section_begin(pomp2_region_3,
     &"73*regionType=sections*sscl=test4.f:33:33*escl=test4.f:0:0*"//
     &"numSections=1**" )
#line 37 "test4.f"
      write(*,*) "section nowait 2"
      call POMP2_Section_end(pomp2_region_3)
#line 38 "test4.f"
!$omp end sections nowait
      call POMP2_Sections_exit(pomp2_region_3)
#line 39 "test4.f"
      
      call POMP2_Single_enter(pomp2_region_4,
     &"57*regionType=single*sscl=test4.f:40:40*escl=test4.f:0:0**""//
     &" )
#line 40 "test4.f"
!$omp single
      call POMP2_Single_begin(pomp2_region_4)
#line 41 "test4.f"
      write(*,*) "single nowait"
      call POMP2_Single_end(pomp2_region_4)
#line 42 "test4.f"
!$omp end single nowait
      call POMP2_Single_exit(pomp2_region_4)
#line 43 "test4.f"
      
      call POMP2_Workshare_enter(pomp2_region_5,
     &"60*regionType=workshare*sscl=test4.f:44:44*escl=test4.f:0:0"//
     &"**" )
#line 44 "test4.f"
!$omp workshare
      a = b + c
#line 46 "test4.f"
!$omp end workshare nowait
      call POMP2_Workshare_exit(pomp2_region_5)
#line 47 "test4.f"

      pomp_if = .true.
      if (pomp_if) then
      call POMP2_Task_create_begin(pomp2_region_6, pomp2_new_task,
     &pomp2_old_task, 
     &pomp_if,
     &"67*regionType=task*sscl=test4.f:48:48*escl=test4.f:0:0*hasU"//
     &"ntied=1**" )
      end if
#line 48 "test4.f"
!$omp task       
!$omp& if(pomp_if) firstprivate(pomp2_new_task, pomp_if)
      if (pomp_if) then
      call POMP2_Task_begin(pomp2_region_6, pomp2_new_task)
      end if
#line 49 "test4.f"
      write(*,*) "task"
      if (pomp_if) then
      call POMP2_Task_end(pomp2_region_6)
      end if
#line 50 "test4.f"
!$omp end task
      if (pomp_if) then
      call POMP2_Task_create_end(pomp2_region_6, pomp2_old_task)
      end if
#line 51 "test4.f"
            
      call POMP2_Implicit_barrier_enter(pomp2_region_1, pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(pomp2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(pomp2_region_1)
#line 52 "test4.f"
!$omp end parallel
      call POMP2_Parallel_join(pomp2_region_1, pomp2_old_task)
#line 53 "test4.f"
      end program test4
      

      subroutine POMP2_Init_regions_000()
         include 'test4.f.opari.inc'
         call POMP2_Assign_handle( pomp2_region_1, 
     &"61*regionType=parallel*sscl=test4.f:25:25*escl=test4.f:52:5"//
     &"2**" )
         call POMP2_Assign_handle( pomp2_region_2, 
     &"55*regionType=do*sscl=test4.f:27:27*escl=test4.f:31:31**" )
         call POMP2_Assign_handle( pomp2_region_3, 
     &"75*regionType=sections*sscl=test4.f:33:33*escl=test4.f:38:3"//
     &"8*numSections=2**" )
         call POMP2_Assign_handle( pomp2_region_4, 
     &"59*regionType=single*sscl=test4.f:40:40*escl=test4.f:42:42*"//
     &"*" )
         call POMP2_Assign_handle( pomp2_region_5, 
     &"62*regionType=workshare*sscl=test4.f:44:44*escl=test4.f:46:"//
     &"46**" )
         call POMP2_Assign_handle( pomp2_region_6, 
     &"69*regionType=task*sscl=test4.f:48:48*escl=test4.f:50:50*ha"//
     &"sUntied=1**" )
      end
