--- linux-2.6.12-rc2-orig/mm/filemap.c	2005-04-04 18:40:05.000000000 +0200
+++ linux-2.6.12-rc2-fkt/mm/filemap.c	2005-05-21 01:12:08.863060139 +0200
@@ -392,6 +392,62 @@ int add_to_page_cache_lru(struct page *p
 	return ret;
 }
 
+/* st */
+int checkin_cache_page(struct page *page, struct address_space *mapping,
+		pgoff_t offset, int gfp_mask) {
+	int err;
+
+	if (!(err = add_to_page_cache(page, mapping, offset, gfp_mask))) {
+		SetPageReserved(page);
+		SetPageUptodate(page);
+		set_page_dirty(page);
+	}
+	return err;
+}
+EXPORT_SYMBOL(checkin_cache_page);
+
+void checkout_cache_page(struct page *page) {
+	if (!PageReserved(page))
+		PAGE_BUG(page);
+	if (!PageUptodate(page))
+		PAGE_BUG(page);
+	if (!page->mapping)
+		PAGE_BUG(page);
+	if (PageDirty(page))
+		filemap_fdatawrite(page->mapping);
+
+	spin_lock(&page->mapping->tree_lock);
+
+	/* get lock on the page. It is already locked if being written for
+	 * instance. */
+	while (TestSetPageLocked(page)) {
+		spin_unlock(&page->mapping->tree_lock);
+		wait_on_page_bit(page,PG_locked);
+		if (need_resched()) {
+			__set_current_state(TASK_RUNNING);
+			schedule();
+		}
+		spin_lock(&page->mapping->tree_lock);
+	}
+	spin_unlock(&page->mapping->tree_lock);
+
+	while (page_has_buffers(page) && !try_to_release_page(page,0)) {
+		static int i;
+		if (i++<10)
+			printk(KERN_WARNING "fkt:gosh, buffer busy, sleeping on it.\n");
+		wait_buffers_clean(page);
+	}
+
+	remove_from_page_cache(page);	/* I'm not sure whether this also removes from lru ... */
+	page_cache_release(page);
+	unlock_page(page);
+	ClearPageReserved(page);
+
+	if (page_has_buffers(page))
+		PAGE_BUG(page);
+}
+EXPORT_SYMBOL(checkout_cache_page);
+
 /*
  * In order to wait for pages to become available there must be
  * waitqueues associated with pages. By using a hash table of
@@ -1061,8 +1117,21 @@ int file_send_actor(read_descriptor_t * 
 	if (size > count)
 		size = count;
 
-	written = file->f_op->sendpage(file, page, offset,
+	if (file->f_op->sendpage) {
+		written = file->f_op->sendpage(file, page, offset,
 				       size, &file->f_pos, size<count);
+	} else {
+		char *kaddr;
+		mm_segment_t old_fs;
+
+		old_fs = get_fs();
+		set_fs(KERNEL_DS);
+		kaddr = kmap(page);
+		written = file->f_op->write(file, kaddr + offset, size, &file->f_pos);
+		kunmap(page);
+		set_fs(old_fs);
+	}
+
 	if (written < 0) {
 		desc->error = written;
 		written = 0;
@@ -1709,13 +1778,19 @@ filemap_copy_from_user(struct page *page
 	int left;
 
 	kaddr = kmap_atomic(page, KM_USER0);
-	left = __copy_from_user_inatomic(kaddr + offset, buf, bytes);
+	if (kaddr+offset == buf)
+		left = 0;
+	else
+		left = __copy_from_user_inatomic(kaddr + offset, buf, bytes);
 	kunmap_atomic(kaddr, KM_USER0);
 
 	if (left != 0) {
 		/* Do it the slow way */
 		kaddr = kmap(page);
-		left = __copy_from_user(kaddr + offset, buf, bytes);
+		if (kaddr+offset == buf)
+			left = 0;
+		else
+			left = __copy_from_user(kaddr + offset, buf, bytes);
 		kunmap(page);
 	}
 	return bytes - left;
